{"version":3,"sources":["components/Navbar.js","components/NavbarInfo.js","components/Main.js","components/App.js","serviceWorker.js","index.js"],"names":["Navbar","_ref","account","name","symbol","react_default","a","createElement","className","href","NavbarInfo","_this","this","props","balance","onSubmit","e","preventDefault","approve","address","value","tokens","ref","input","type","placeholder","aria-label","React","Component","Main","transfer","transferFrom","addressFrom","addressTo","tokenss","App","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","loadWeb3","loadContract","loadAccount","window","ethereum","on","asyncToGenerator","regenerator_default","mark","_callee","accounts","wrap","_context","prev","next","_this2","stop","_x","apply","arguments","web3","Web3","enable","currentProvider","alert","eth","getAccounts","setState","token","methods","balanceOf","decimals","totalSupply","Math","pow","toFixed","net","getId","networkId","networkData","Token","networks","Contract","abi","sleep","milliseconds","Promise","resolve","setTimeout","getBlockNumber","blockNumber","blockNumberNew","send","from","_ref2","_callee7","_context7","_this3","checkBlockNumber","_x4","_ref3","_callee9","_context9","_this4","_x8","_ref4","_callee11","_context11","_this5","_x11","components_Navbar","components_NavbarInfo","bind","components_Main","Boolean","location","hostname","match","ReactDOM","render","src_components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.fc9e286a.chunk.js","sourcesContent":["import React from 'react'\r\n    //Navbar with account address\r\n    function Navbar({account, name, symbol}) {\r\n\r\n            return(\r\n                <nav className=\"navbar navbar-expand-lg navbar-dark bg-dark\">\r\n                    <div className=\"container\">\r\n                        <a className=\"navbar-brand\" href=\"https://github.com/MrRav3n/starter_kit\"><h3>{name} ({symbol})</h3></a>\r\n                        <span className=\"text-white ml-auto \">\r\n                            <h5 className=\"text-white d-none d-md-block\">Your account: {account} </h5>\r\n                        </span>\r\n                    </div>\r\n                </nav>\r\n            );\r\n    }\r\n\r\nexport default Navbar\r\n","import React from 'react'\r\nimport { Dropdown } from 'react-bootstrap';\r\n    //Navbar with account address\r\n    class NavbarInfo extends React.Component{\r\n        render() {\r\n            return(\r\n                <span>\r\n                <div className=\"container mt-3 rounded\">\r\n                <nav className=\"navbar navbar-dark  bg-primary rounded\">\r\n                <a className=\"navbar-brand d-none d-md-block\"><h3>Your current balance {this.props.balance}</h3></a>\r\n                <a className=\"navbar-brand d-block d-md-none\"><h5 className=\" text-center\">Your current balance {this.props.balance}</h5></a>\r\n\r\n\r\n                <form className=\"form-inline col-xl-5 justify-content-center align-items-center\" onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    this.props.approve(this.address.value, this.tokens.value)\r\n                }}>\r\n                  <input className=\"form-control  mb-3 mr-3 col-5\" ref={(input) => this.address = input } type=\"search\" placeholder=\"Address\" aria-label=\"Address\"/>\r\n                  <input className=\"form-control mb-3 col-5\" ref={(input) => this.tokens = input } type=\"search\" placeholder=\"Tokens\" aria-label=\"Address\"/>\r\n                  <button className=\"btn btn-danger mt-3 my-sm-0 col-12\" type=\"submit\">Add Permision</button>\r\n                </form>\r\n\r\n                </nav>\r\n                </div>\r\n\r\n\r\n\r\n                </span>\r\n            );\r\n\r\n        }\r\n    }\r\n\r\nexport default NavbarInfo\r\n","import React from 'react'\r\n\r\n    //Navbar with account address\r\n    class Main extends React.Component{\r\n        render() {\r\n            return(\r\n                <span>\r\n                <h1 className=\"text-center mt-3\">Transfer tokens from your account</h1>\r\n                <form className=\"form-inline mt-5 d-flex justify-content-center\" onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    this.props.transfer(this.address.value, this.tokens.value);\r\n                }}>\r\n                <div className=\"form-check form-check-inline\" >\r\n                    <input type=\"text\" ref={(input) => this.tokens = input} className=\"form-control mr-2\" placeholder=\"Ammount\"/>\r\n                    <input type=\"text\"  ref={(input) => this.address = input} className=\"form-control mr-2\" placeholder=\"Address\"/>\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send Tokens</button>\r\n                </div>\r\n                </form>\r\n                <h1 className=\"text-center mt-3\">Transfer tokens from someone account</h1>\r\n                <form className=\"form-inline mt-5 d-flex justify-content-center\" onSubmit={(e) => {\r\n                    e.preventDefault();\r\n                    this.props.transferFrom(this.addressFrom.value, this.addressTo.value, this.tokenss.value);\r\n                }}>\r\n                <div className=\"form-check form-check-inline\" >\r\n                    <input type=\"text\" ref={(input) => this.addressFrom = input} className=\"form-control mr-2\" placeholder=\"Address From\"/>\r\n                    <input type=\"text\" ref={(input) => this.tokenss = input} className=\"form-control mr-2\" placeholder=\"Ammount\"/>\r\n                    <input type=\"text\"  ref={(input) => this.addressTo = input} className=\"form-control mr-2\" placeholder=\"Address To\"/>\r\n                    <button type=\"submit\" className=\"btn btn-primary \">Send Tokens</button>\r\n                </div>\r\n                </form>\r\n                </span>\r\n            );\r\n\r\n        }\r\n    }\r\n\r\nexport default Main\r\n","import React, { Component } from 'react';\r\nimport Navbar from \"./Navbar\"\r\nimport './App.css';\r\nimport Web3 from 'web3'\r\nimport NavbarInfo from './NavbarInfo'\r\nimport Token from '../abis/Token.json'\r\nimport Main from './Main'\r\n\r\nclass App extends Component {\r\n\r\n    async componentWillMount() {\r\n        await this.loadWeb3();\r\n        await this.loadContract();\r\n        await this.loadAccount();\r\n\r\n        window.ethereum.on('accountsChanged', async (accounts)  => {\r\n          await this.loadAccount();\r\n        })\r\n    }\r\n    async loadWeb3() {\r\n        if(window.ethereum) {\r\n            window.web3 = new Web3(window.ethereum)\r\n            await window.ethereum.enable()\r\n        } else if (window.web3) {\r\n            window.web3 = new Web3(window.web3.currentProvider)\r\n        } else {\r\n            window.alert('Non-Ethereum browser detected. You should consider trying MetaMask!')\r\n        }\r\n    }\r\n    async loadAccount() {\r\n        const account = await window.web3.eth.getAccounts();\r\n        this.setState({account: account[0]});\r\n        let balance = await this.state.token.methods.balanceOf(this.state.account).call();\r\n\r\n        const decimals = await this.state.token.methods.decimals().call();\r\n        const symbol = await this.state.token.methods.symbol().call();\r\n        const name = await this.state.token.methods.name().call();\r\n        const totalSupply = await this.state.token.methods.totalSupply().call();\r\n        balance = balance / 10 ** decimals ;\r\n\r\n        this.setState({balance: balance.toFixed(decimals), name, decimals, symbol, totalSupply})\r\n    \r\n    }\r\n    async loadContract() {\r\n        const networkId = await window.web3.eth.net.getId();\r\n        const networkData = Token.networks[networkId];\r\n        if(networkData) {\r\n            const token = await window.web3.eth.Contract(Token.abi, networkData.address)\r\n            this.setState({token})\r\n        } else {\r\n            alert(\"Cannot connect to detached network!\");\r\n        }\r\n    }\r\n    async checkBlockNumber() {\r\n       const sleep = (milliseconds) => {\r\n           return new Promise(resolve => setTimeout(resolve, milliseconds))\r\n       };\r\n       const blockNumber = await window.web3.eth.getBlockNumber()\r\n       let blockNumberNew = await window.web3.eth.getBlockNumber()\r\n       while(blockNumber === blockNumberNew) {\r\n           blockNumberNew = await window.web3.eth.getBlockNumber()\r\n           await sleep(100);\r\n       }\r\n       await this.loadAccount();\r\n\r\n   }\r\n    async transfer(address, tokens) {\r\n        await this.state.token.methods.transfer(address, tokens).send({from: this.state.account}, async (e) => {\r\n            await this.checkBlockNumber();\r\n        })\r\n    }\r\n    async transferFrom(addressFrom, addressTo, tokens) {\r\n        await this.state.token.methods.transferFrom(addressFrom, addressTo, tokens).send({from: this.state.account}, async(e) => {\r\n            await this.checkBlockNumber();\r\n        })\r\n    }\r\n    async approve(address, tokens) {\r\n        await this.state.token.methods.approve(address, tokens).send({from: this.state.account}, async(e) => {\r\n            await this.checkBlockNumber();\r\n        })\r\n    }\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            account: null,\r\n            balance: 0,\r\n        }\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n      <Navbar account={this.state.account} name={this.state.name} symbol={this.state.symbol}/>\r\n      <NavbarInfo approve={this.approve.bind(this)} balance={this.state.balance}/>\r\n      <Main transferFrom={this.transferFrom.bind(this)} transfer={this.transfer.bind(this)}/>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.css'\r\nimport App from './components/App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}